Você é um professor e deseja identificar o aluno que obteve a maior nota em sua disciplina. Você tem duas tabelas em seu banco de dados: "Alunos" e "Notas". A tabela "Notas" registra as notas dos alunos em sua disciplina. Seu desafio é encontrar o aluno com a maior nota.

Tabela "Alunos":

ID_aluno (chave primária)
Nome
Curso
Tabela "Notas":

ID_nota (chave primária)
ID_aluno (chave estrangeira)
Nota
Seu desafio é criar uma consulta SQL que retorne o nome do aluno que obteve a maior nota em sua disciplina.

SELECT nome FROM Alunos
WHERE id_aluno=
(select id_aluno 
FROM Notas WHERE nota=
(SELECT MAX(NOTA) FROM Notas));


Você é um(a) gerente de uma loja online e deseja identificar os clientes que fizeram pedidos e aqueles que ainda não fizeram nenhum pedido em sua loja. Você tem duas tabelas em seu banco de dados: "Clientes" e "Pedidos". A tabela "Clientes" contém informações sobre os clientes, enquanto a tabela "Pedidos" registra informações sobre os pedidos feitos por esses clientes. Seu desafio é encontrar os clientes que não fizeram pedidos em sua loja.

Tabela "Clientes":

ID (chave primária)
Nome
Email
Tabela "Pedidos":

ID (chave primária)
IDcliente (chave estrangeira)
DataPedido
Seu desafio é criar uma consulta SQL que retorne o nome dos clientes que ainda não fizeram pedidos em sua loja.

SELEC5T nome
FROM  clientes c 
LEFT JOIN pedido p	
ON c.ID = p.IDcliente
WHERE p.ID_pedido IS NULL;
    
Utilizando as tabelas de clientes, pedidos e itensPedidos do Serenatto, crie uma consulta que busque o total dos pedidos feitos por cada cliente. A tabela "Clientes" contém informações sobre os clientes, 
enquanto a tabela "Pedidos" registra informações sobre os pedidos feitos por esses clientes. 
Em ItensPedidos, você encontra as informações de quantidade vendida de cada produto e o preço unitário.

Seu desafio é criar uma consulta SQL que retorne o nome de cada cliente e o valor total dos pedidos que cada um deles comprou.

SELECT c.nombre, SUM(ip.precio_unitario) AS total_precio
FROM clientes c
INNER JOIN pedidos p ON c.id = p.idcliente
INNER JOIN itenspedidos ip ON p.id = ip.idpedido
GROUP BY c.nombre;


Traga todos os dados da cliente Maria Silva.

SELECT * FROM clientes
WHERE nome = 'Maria Silva';

Busque o ID do pedidov e o ID do cliente dos pedidos onde o status esteja como entregue.

SELECT id,idcliente
FROM pedidos WHERE status ='entregue';

Retorne todos os produtos onde o preço seja maior que 10 e menor que 15.

SELECT * from produtos
WHERE preco > 10 AND preco <15;

Busque o nome e cargo dos colaboradores que foram contratados entre 2022-01-01 e 2022-06-31.

SELECT nombre, cargo FROM colaboradores
WHERE datacontratacao BETWEEN '2022-01-01' AND '2022-06-31';

Recupere o nome do cliente que fez o primeiro pedido.

SELECT nombre FROM clientes
WHERE id = (
SELECT idcliente FROM pedidos 
ORDER BY datahorapedido asc LIMIT 1);

Liste os produtos que nunca foram pedidos.

SELECT nombre FROM produtos
WHERE id NOT IN (
SELECT idProduto
FROM ItensPedido);

Liste os nomes dos clientes que fizeram pedidos entre 2023-01-01 e 2023-12-31.

SELECT c.nombre
FROM clientes c
INNER JOIN pedidos p ON c.id = p.idCliente
WHERE p.datahorapedido 
BETWEEN '2023-01-01' AND '2023-01-31';

Recupere os nomes dos produtos que estão em menos de 15 pedidos.

SELECT p.nombre
From produtos p
INNER JOIN intensPedidos ip
on p.id = ip.idProduto
GROUP BY p.nombre
HAVING COUNT <15;

Liste os produtos e o ID do pedido que foram realizados pelo cliente "Pedro Alves" ou pela cliente "Ana Rodrigues".

SELECT p.nombre, ip.idpedido
FROM produtos p 
INNER JOIN itensPedidos ip
ON p.id =ip.idproduto
INNER JOIN pedidos ped 
ON ip.idpedido = ped.id
INNER JOIN clientes c 
ON ped.idcliente = c.id
WHERE c.nombre = 'Pedro Alves' OR c.nombre = 'Ana Rodrigues');

Recupere o nome e o ID do cliente que mais comprou(valor) no Serenatto.

SELECT ped.idCliente, c.nome, SUM(ip.quantidade * ip.precounitario) as Valortotal 
FROM clientes c 
INNER JOIN pedidos ped 
ON c.id = ped.idcliente 
INNER JOIN itensPedido ip 
ON ped.id = ip.idpedido 
GROUP BY ped.idCliente 
ORDER BY Valortotal DESC 
LIMIT 1;
